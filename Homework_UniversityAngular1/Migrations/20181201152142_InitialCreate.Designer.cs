// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using University.AppContext;

namespace University.WebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181201152142_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.Audience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("tbAudiences");
                });

            modelBuilder.Entity("Domain.Entities.AudLect", b =>
                {
                    b.Property<Guid>("AudId");

                    b.Property<Guid>("LectId");

                    b.Property<Guid>("GroupId");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("TeachSubjSubjId");

                    b.Property<Guid?>("TeachSubjTeacherId");

                    b.HasKey("AudId", "LectId", "GroupId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("LectId");

                    b.HasIndex("TeachSubjTeacherId", "TeachSubjSubjId");

                    b.ToTable("tbAudLect");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("tbDepartments");
                });

            modelBuilder.Entity("Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(64);

                    b.Property<Guid?>("SpecialityId");

                    b.HasKey("Id");

                    b.HasIndex("SpecialityId");

                    b.ToTable("tbGroups");
                });

            modelBuilder.Entity("Domain.Entities.Lection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Day");

                    b.Property<DateTime>("Finish")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("tbLections");
                });

            modelBuilder.Entity("Domain.Entities.Mark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("StudentId");

                    b.Property<int>("StudentsMark");

                    b.Property<Guid?>("TeachSubjSubjId");

                    b.Property<Guid?>("TeachSubjTeacherId");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeachSubjTeacherId", "TeachSubjSubjId");

                    b.ToTable("tbMarks");
                });

            modelBuilder.Entity("Domain.Entities.Phone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("StudentId");

                    b.Property<string>("StudentsPhone")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("tbPhones");
                });

            modelBuilder.Entity("Domain.Entities.Speciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("tbSpeciality");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(128);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(64);

                    b.Property<string>("FirstName")
                        .HasMaxLength(64);

                    b.Property<Guid?>("GroupId");

                    b.Property<string>("LastName")
                        .HasMaxLength(64);

                    b.Property<int>("LogbookNumber");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("tbStudents");
                });

            modelBuilder.Entity("Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("tbSubjects");
                });

            modelBuilder.Entity("Domain.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DepartmentId");

                    b.Property<string>("FirstName")
                        .HasMaxLength(64);

                    b.Property<string>("LastName")
                        .HasMaxLength(64);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("tbTeachers");
                });

            modelBuilder.Entity("Domain.Entities.TeachSubj", b =>
                {
                    b.Property<Guid>("TeacherId");

                    b.Property<Guid>("SubjId");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("TeacherId", "SubjId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("SubjId");

                    b.ToTable("tbTeachSubj");
                });

            modelBuilder.Entity("Domain.Entities.AudLect", b =>
                {
                    b.HasOne("Domain.Entities.Audience", "Audience")
                        .WithMany("AudLects")
                        .HasForeignKey("AudId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Group", "Group")
                        .WithMany("AudLects")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Lection", "Lection")
                        .WithMany("AudLects")
                        .HasForeignKey("LectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.TeachSubj", "TeachSubj")
                        .WithMany("AudLects")
                        .HasForeignKey("TeachSubjTeacherId", "TeachSubjSubjId");
                });

            modelBuilder.Entity("Domain.Entities.Group", b =>
                {
                    b.HasOne("Domain.Entities.Speciality", "Speciality")
                        .WithMany("Groups")
                        .HasForeignKey("SpecialityId");
                });

            modelBuilder.Entity("Domain.Entities.Mark", b =>
                {
                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.HasOne("Domain.Entities.TeachSubj", "TeachSubj")
                        .WithMany("Marks")
                        .HasForeignKey("TeachSubjTeacherId", "TeachSubjSubjId");
                });

            modelBuilder.Entity("Domain.Entities.Phone", b =>
                {
                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany("Phones")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.HasOne("Domain.Entities.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Domain.Entities.Teacher", b =>
                {
                    b.HasOne("Domain.Entities.Department", "Department")
                        .WithMany("Teachers")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("Domain.Entities.TeachSubj", b =>
                {
                    b.HasOne("Domain.Entities.Subject", "Subject")
                        .WithMany("TeachSubj")
                        .HasForeignKey("SubjId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Teacher", "Teacher")
                        .WithMany("TeachSubj")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
